[{"C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\index.js":"1","C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\App.js":"2","C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\Components\\List\\List.jsx":"3","C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\Components\\List\\Badge\\Badge.jsx":"4","C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\Components\\Tasks\\Tasks.jsx":"5","C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\Components\\AddListButton\\AddButtonList.jsx":"6","C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\Components\\Tasks\\AddTaskForm.jsx":"7","C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\Components\\Tasks\\Task\\Task.jsx":"8"},{"size":287,"mtime":1609203017377,"results":"9","hashOfConfig":"10"},{"size":5164,"mtime":1609290400756,"results":"11","hashOfConfig":"10"},{"size":1325,"mtime":1609292504852,"results":"12","hashOfConfig":"10"},{"size":313,"mtime":1608679878036,"results":"13","hashOfConfig":"10"},{"size":1875,"mtime":1609291543416,"results":"14","hashOfConfig":"10"},{"size":2584,"mtime":1609286707974,"results":"15","hashOfConfig":"10"},{"size":1938,"mtime":1609195529442,"results":"16","hashOfConfig":"10"},{"size":1493,"mtime":1609288413602,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1dqol99",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\index.js",[],["38","39"],"C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\App.js",[],"C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\Components\\List\\List.jsx",[],"C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\Components\\List\\Badge\\Badge.jsx",[],"C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\Components\\Tasks\\Tasks.jsx",["40"],"\r\nimport React, { useState } from 'react';\r\nimport './Tasks.scss';\r\nimport editSvg from '../../images/edit.svg'\r\nimport axios from 'axios';\r\nimport AddTaskForm from './AddTaskForm';\r\nimport { Link } from 'react-router-dom';\r\nimport Task from './Task/Task';\r\n\r\nconst Tasks = ({ onCompletedTask, lists, onEditTitle, onAddTask, withoutEmpty, onRemoveTask, onEditTask }) => {\r\n\r\n    const EditTitle = () => {\r\n        const newTitle = window.prompt('Название списка', lists.name);\r\n        if (newTitle) {\r\n            onEditTitle(lists.id, newTitle);\r\n            axios.patch('http://localhost:3001/lists/' + lists.id, {\r\n                name: newTitle\r\n            }).catch(() => {\r\n                alert('Неудалось изменение из-за возниковения ошибки')\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return <div className='tasks'>\r\n        <Link style={{ textDecoration: 'none' }} to={`/lists/${lists.id}`}>\r\n            <h2 style={{ color: lists.color.hex }} className='tasks__title'>\r\n                {lists.name}\r\n                <img onClick={EditTitle} src={editSvg} alt='Edit icon' />\r\n            </h2>\r\n        </Link>\r\n\r\n        <div className='tasks__items'>\r\n            {!withoutEmpty && lists.tasks && !lists.tasks.length && <h2>Задачи отсутсвуют</h2>}\r\n            {lists.tasks &&\r\n                lists.tasks.map(task =>\r\n                    <Task\r\n                        onCompleted={onCompletedTask}\r\n                        lists={lists}\r\n                        onRemove={onRemoveTask}\r\n                        onEdit={onEditTask}\r\n                        key={task.id} \r\n                        {...task} />)}\r\n            <AddTaskForm \r\n            key={lists.id} \r\n            onAddTask={onAddTask} \r\n            lists={lists} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport default Tasks;","C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\Components\\AddListButton\\AddButtonList.jsx",["41"],"import React, { Fragment, useEffect, useState } from 'react';\r\nimport './AddButtonList.scss';\r\nimport addImg from '../../images/plus.svg';\r\nimport List from '../List/List';\r\nimport Badge from '../List/Badge/Badge';\r\nimport closeSvg from '../../images/close.svg';\r\nimport axios from 'axios';\r\n\r\nconst AddButtonList = ({ colors, onAdd }) => {\r\n    const [visiblePopup, setVisiblePopup] = useState(false);\r\n    const [selectedColor, selectColor] = useState(3);\r\n    const [inputValue, setIputValue] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(Array.isArray(colors)) {\r\n            selectColor(colors[0].id)\r\n        }\r\n\r\n    }, [colors])\r\n    \r\n    const onClose = () => {\r\n        setVisiblePopup(false);\r\n        setIputValue('');\r\n        selectColor(colors[0].id);\r\n    }\r\n    const addList = () => {\r\n        if (!inputValue) {\r\n            alert('Введите значение');\r\n            return;\r\n        }\r\n        setIsLoading(true)\r\n      axios\r\n      .post('http://localhost:3001/lists', {name:inputValue,\r\n    colorId: selectedColor})\r\n    .then(({data}) => {\r\n        const color = colors.filter(c => c.id === selectedColor)[0];\r\n        const listObj = {...data, color, task: []};\r\n        onAdd(listObj)\r\n        onClose()\r\n    }).finally(() => {\r\n        setIsLoading(false)\r\n    })\r\n       \r\n    }\r\n    return <Fragment>\r\n        <List\r\n            onClick={() => setVisiblePopup(true)}\r\n\r\n            items={[{\r\n                icon: (<img src={addImg} alt='List icon' width='10px' height='10px' />),\r\n                name: 'Добавить список',\r\n                active: false,\r\n            },]}\r\n            className='addList' />\r\n        {visiblePopup && <div className='addListPopup'>\r\n\r\n            <img onClick={onClose} src={closeSvg} className=\"addListPopup__closeBtn\"></img>\r\n\r\n            <input value={inputValue} onChange={e => setIputValue(e.target.value)} className='field' type='text' placeholder='Название списка' />\r\n            <div className='addListPopup__colors'>\r\n                {colors.map(color =>\r\n(                    <Badge onClick={() => selectColor(color.id)}\r\n                        key={color.id}\r\n                        color={color.name}\r\n                        className={selectedColor === color.id && 'active'} />))}\r\n            </div>\r\n            <button onClick={addList} className='button'>{isLoading ?'...Добавление' :'Добавить'}</button>\r\n        </div>}\r\n    </Fragment>\r\n}\r\n\r\n\r\nexport default AddButtonList;","C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\Components\\Tasks\\AddTaskForm.jsx",[],"C:\\Users\\user\\Desktop\\Sobol\\ToDo\\to-do\\src\\Components\\Tasks\\Task\\Task.jsx",[],["42","43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":2,"column":17,"nodeType":"50","messageId":"51","endLine":2,"endColumn":25},{"ruleId":"52","severity":1,"message":"53","line":58,"column":13,"nodeType":"54","endLine":58,"endColumn":86},{"ruleId":"44","replacedBy":"55"},{"ruleId":"46","replacedBy":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["57"],["58"],"no-global-assign","no-unsafe-negation"]